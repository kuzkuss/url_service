// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/kuzkuss/url_service/models"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryI is an autogenerated mock type for the RepositoryI type
type RepositoryI struct {
	mock.Mock
}

// CreateLink provides a mock function with given fields: link
func (_m *RepositoryI) CreateLink(link *models.Link) error {
	ret := _m.Called(link)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Link) error); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectLinkByOriginalLink provides a mock function with given fields: originalLink
func (_m *RepositoryI) SelectLinkByOriginalLink(originalLink string) (string, error) {
	ret := _m.Called(originalLink)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(originalLink)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(originalLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectLinkByShortLink provides a mock function with given fields: shortLink
func (_m *RepositoryI) SelectLinkByShortLink(shortLink string) (string, error) {
	ret := _m.Called(shortLink)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortLink)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryI interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryI creates a new instance of RepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryI(t mockConstructorTestingTNewRepositoryI) *RepositoryI {
	mock := &RepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
